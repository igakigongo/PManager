@model PManager.Domain.Entities.Project

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_LayoutManager.cshtml";
}

<link href="~/Content/sb-admin-v2/css/plugins/dataTables/dataTables.bootstrap.css" rel="stylesheet" />
<link href="~/Content/bootstrap-datepicker3.css" rel="stylesheet" />
<style type="text/css">
    /* just a dummy class */
    label {
        font-size: smaller;
    }
    .visible {
        visibility: visible;
    }

    .invisible {
        visibility: hidden;
    }
</style>

<div id="page-wrapper">
    <div class="row">
        <div class="col-lg-12">
            <h3 class="page-header">Project Details - @Model.ProjectCode</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <i class="fa fa-bar-chart-o fa-fw"></i> <strong><small>Costing</small></strong> 
                </div>
                <!-- /.panel-heading -->
                <div class="panel-body" id="container">
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <i class="fa fa-tasks fa-fw"></i>       <strong><small>Project Tasks</small></strong>
                    <div class="pull-right">
                        <div class="btn-group">
                            <button type="button" class="btn btn-default btn-xs dropdown-toggle" data-toggle="dropdown">
                                Project Actions
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu pull-right" role="menu">
                                <li><a href='@Url.Action("Index", "Project")'><strong><small>Back To Projects</small></strong></a></li>
                                <li><a href="#" title="Add Task"><strong><small>New Task</small></strong></a></li>
                                <li class="divider"></li>
                                <li><a href="#" title="Edit Project"><strong><small>Edit Project</small></strong></a></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="panel-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered table-hover" id="project-Tasks">
                            <thead>
                                <tr>
                                    <td>Task</td>
                                    <td>Progress</td>
                                    <td>Team</td>
                                    <td>Actions</td>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var task in Model.ProjectTasks)
                                {
                                    <tr id="@task.Id">
                                        <td>@task.TaskName</td>
                                        <td>
                                            @if(task.IsCompleted){
                                                @String.Format("Task closed -  completed on {0:D}", task.Actual.EndDate)
                                            }else{
                                                if(task.Actual.StartDate==null){
                                                    @String.Format("Task set to start on: {0:D}", task.Estimated.StartDate)
                                                }else{
                                                    if (task.Actual.EndDate >= DateTime.Now)
                                                    {
                                                        @String.Format("Ongoing - task ends on: {0:D}", task.Estimated.EndDate)
                                                    }
                                                }
                                            }
                                        </td>
                                        <td>
                                            @if (task.Team == null)
                                            {
                                                <span class="text-info"><em>No Team Attached</em></span>
                                            }
                                            else
                                            {
                                                @task.Team.Name
                                            }
                                        </td>
                                        <td>
                                            <a href='@Url.Action("Edit", "ProjectTask", new { id = task.Id })' title="Edit"><i class="fa fa-edit"></i></a> -
                                            <a href='@Url.Action("Details", "ProjectTask", new { id = task.Id })' title="Details"><i class="fa fa-th-list"></i></a> -
                                            <a href='@Url.Action("Delete", "ProjectTask", new { id =  task.Id })' title="Delete"><i class="fa fa-trash-o"></i></a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <!-- Modal -->
                    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                    <h4 class="modal-title" id="myModalLabel">Add Task</h4>
                                </div>
                                <div class="modal-body">
                                    <div class="col-lg-12">
                                        <label>Task Name</label>
                                        <input class="form-control" name="TaskName" id="TaskName" />
                                        <label class="invisible" id="TaskNameLabel" style="color:#f00">* Required</label>
                                    </div>
                                    <div class="col-lg-6">
                                        <label>Estimated Start Date</label>
                                        <input class="form-control" name="TaskESD" id="TaskESD" placeholder="mm/dd/yyyy" />
                                        <label class="invisible" id="TaskESDLabel" style="color:#f00">* Required</label>
                                    </div>
                                    <div class="col-lg-6">
                                        <label>Estimated Cost</label>
                                        <div class="form-group input-group">
                                            <span class="input-group-addon">$</span>
                                            <input type="number" class="form-control" name="TaskEB" id="TaskEB" />
                                            <span class="input-group-addon">.00</span>
                                        </div>
                                        <label>Estimated End Date</label>
                                        <input class="form-control" name="TaskEED" id="TaskEED" placeholder="mm/dd/yyyy" />
                                        <label class="invisible" id="TaskEEDLabel" style="color:#f00">* Required</label>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary" id="addtask">Save changes</button>
                                </div>
                            </div>
                            <!-- /.modal-content -->
                        </div>
                        <!-- /.modal-dialog -->
                    </div>
                    <!-- /.modal -->
                </div>
            </div>
        </div>
    </div>
</div>


@section scripts{
    <!-- Page-Level Plugin Scripts - Tables -->
    <script src="~/Content/sb-admin-v2/js/plugins/dataTables/jquery.dataTables.js"></script>
    <script src="~/Content/sb-admin-v2/js/plugins/dataTables/dataTables.bootstrap.js"></script>
    <script src="~/Scripts/highcharts.js"></script>
    <script src="~/Scripts/bootstrap-datepicker.js"></script>

    <script>
        $(document).ready(function () {
            //Ajax Global Setup
            $.ajaxSetup({
                dataType: 'json',
                contentType: 'application/json, charset=utf-8'
            });

            /*
            * Global Initialization For   DatePickers
            */
            $('#TaskESD').datepicker();
            $('#TaskEED').datepicker();

            // Modal Popup script
            $('a[title="Add Task"]').click(function (event) {
                event.preventDefault();
                $('#myModal').modal('show');
            });

            $('#addtask').click(function () {
                var isvalid = true;
                var taskname = $('#TaskName').val();
                var startdate = $('#TaskESD').val();
                var enddate = $('#TaskEED').val();
                var budget = $('#TaskEB').val();
                // checking the task-name
                if (!taskname) {
                    $('#TaskNameLabel').removeClass('invisible').addClass('visible');
                    isvalid = false;
                }
                else {
                    $('#TaskNameLabel').removeClass('visible').addClass('invisible');
                }

                // checking the estimated cost
                if (!budget) {
                    budget = 0;
                } else {
                    if (isNaN(budget)) {
                        alert('Invalid Estimated Cost');
                        return false;
                    }
                }

                // checking the estimated start date
                if (!startdate) {
                    $('#TaskESDLabel').removeClass('invisible').addClass('visible');
                    isvalid = false;
                } else {
                    $('#TaskESDLabel').removeClass('visible').addClass('invisible');
                }

                // checking the estimated end date
                if (!enddate) {
                    $('#TaskEEDLabel').removeClass('invisible').addClass('visible');
                    isvalid = false;
                } else {
                    $('#TaskEEDLabel').removeClass('visible').addClass('invisible');
                }

                // This happens if my model is valid
                if (isvalid) {
                    // build the project task and make the request
                    var projecttask = {
                        ProjectId: '@Model.Id',
                        TaskName: taskname,
                        Estimated: {
                            StartDate: startdate,
                            EndDate: enddate,
                            Budget: budget
                        }
                    };

                    console.log(JSON.stringify(projecttask));
                    $.post('@Url.Action("Create", "ProjectTask")', JSON.stringify(projecttask), function (result) {
                        console.log(JSON.stringify(result));
                        if (result.message == 'success') {
                            // clear all fields hide the modal
                            $('#myModal').modal('hide');
                            window.location = '@Url.Action("Details", "Project", new { id = Model.Id })';
                        }
                    });
                }
                return isvalid;
            });

            // hook up the tasks data table
            $('#project-Tasks').dataTable();

            var chart;
            chart = new Highcharts.Chart({
                chart: {
                    renderTo: 'container',
                    type: 'column',
                    borderWidth: 1

                },
                title: {
                    text: 'Estimated Vs. Actual Costs',
                },
                credits: {
                    position: {
                        align: 'right'
                    },
                    text: 'BOU - Project Tasks',
                    http: 'http://bou.gov.ug'
                },
                xAxis: {
                    categories: [],
                    label: {
                        rotation: -45,
                        align: 'right'
                    }
                },
                yAxis: {
                    title: {
                        text: 'Project Cost (US$)'
                    },
                },
                series: [
                    {
                        name: 'Estimated',
                        data: []
                    },
                    {
                        name: 'Actual',
                        data: []
                    }
                ]
            });


            /*  Requesting json data for charts */
            $.ajax({
                url: '@Url.Action("GetAllTasks", "ProjectTask", new { projectId = Model.Id })',
                dataType: 'json'
            }).done(function (data) {
                // Initialize Chart Data
                var tasks = [];
                var actualseries = [];
                var estimatedseries = [];
                $.each(data, function (key, value) {
                    $.merge(tasks, $.makeArray(value.TaskName));
                    estimatedseries.push(parseFloat(value.EstimatedBudget));
                    actualseries.push(parseFloat(value.ActualBudget));
                });

                // Set the series data
                chart.series[0].setData(estimatedseries, false);
                chart.series[1].setData(actualseries, false);
                chart.xAxis[0].setCategories(tasks, false);
                // Redraw the charts
                chart.redraw();
            });
        });
    </script>
}